{"version":3,"file":"static/js/959.56608a8d.chunk.js","mappings":"qVAiBe,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAQMC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUP,EAAoB,EAApBA,KAAMQ,EAAc,EAAdA,MACtC,OAAQR,GACN,IAAK,OACHC,EAAQO,GACR,MACF,IAAK,QACHL,EAASK,GACT,MACF,IAAK,WACHH,EAAYG,GAKjB,EAOD,OACE,UAAC,IAAD,CAAMC,KAAK,KAAKC,GAAG,OAAOC,GAAG,OAAOC,GAAG,OAAOC,GAAG,OAAjD,WACE,SAAC,IAAD,WACE,SAAC,IAAD,+BAEF,SAAC,IAAD,WACE,UAAC,IAAD,CAAYC,GAAG,OAAOC,cAAc,SAASC,SAZ9B,SAAAC,GACnBA,EAAEC,iBACFrB,GAASsB,EAAAA,EAAAA,IAAS,CAAEnB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAtBjCH,EAAQ,IACRE,EAAS,IACTE,EAAY,GAsBb,EAQK,WACE,UAAC,IAAD,CAAMQ,GAAG,MAAT,WACE,SAAC,KAAD,CAAgBO,cAAc,OAAOC,UAAU,SAAC,MAAD,OAC/C,SAAC,EAAAC,EAAD,CACEC,YAAY,kBACZC,SAAUlB,EACVE,MAAOR,EACPA,KAAK,OACLyB,KAAK,aAGT,UAAC,IAAD,CAAMZ,GAAG,MAAT,WACE,SAAC,KAAD,CACEO,cAAc,OACdC,UAAU,SAAC,MAAD,OAEZ,SAAC,EAAAC,EAAD,CACEC,YAAY,oBACZC,SAAUlB,EACVE,MAAON,EACPF,KAAK,QACLyB,KAAK,cAGT,UAAC,IAAD,CAAMZ,GAAG,OAAT,WACE,SAAC,KAAD,CAAgBO,cAAc,OAAOC,UAAU,SAAC,MAAD,OAC/C,SAAC,EAAAC,EAAD,CACEC,YAAY,iBACZC,SAAUlB,EACVE,MAAOJ,EACPJ,KAAK,WACLyB,KAAK,iBAGT,SAAC,IAAD,CAAQA,KAAK,SAASJ,SAAS,mBAKxC,C","sources":["pages/Register/Register.js"],"sourcesContent":["import {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  Input,\n  InputGroup,\n  InputLeftAddon,\n} from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { AiOutlineUser } from 'react-icons/ai';\nimport { MdPassword, MdOutlineAlternateEmail } from 'react-icons/md';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n\nexport default function RegisterForm() {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        break;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(register({ name, email, password }));\n    reset();\n  };\n\n  return (\n    <Card maxW=\"sm\" ml=\"auto\" mr=\"auto\" mt=\"48px\" mb=\"48px\">\n      <CardHeader>\n        <Heading>Register form</Heading>\n      </CardHeader>\n      <CardBody>\n        <InputGroup as=\"form\" flexDirection=\"column\" onSubmit={handleSubmit}>\n          <Flex mb=\"8px\">\n            <InputLeftAddon pointerEvents=\"none\" children={<AiOutlineUser />} />\n            <Input\n              placeholder=\"Enter your name\"\n              onChange={handleChange}\n              value={name}\n              name=\"name\"\n              type=\"text\"\n            />\n          </Flex>\n          <Flex mb=\"8px\">\n            <InputLeftAddon\n              pointerEvents=\"none\"\n              children={<MdOutlineAlternateEmail />}\n            />\n            <Input\n              placeholder=\"Enter your e-mail\"\n              onChange={handleChange}\n              value={email}\n              name=\"email\"\n              type=\"email\"\n            />\n          </Flex>\n          <Flex mb=\"16px\">\n            <InputLeftAddon pointerEvents=\"none\" children={<MdPassword />} />\n            <Input\n              placeholder=\"Enter password\"\n              onChange={handleChange}\n              value={password}\n              name=\"password\"\n              type=\"password\"\n            />\n          </Flex>\n          <Button type=\"submit\" children=\"Sign up\" />\n        </InputGroup>\n      </CardBody>\n    </Card>\n  );\n}\n"],"names":["RegisterForm","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","handleChange","target","value","maxW","ml","mr","mt","mb","as","flexDirection","onSubmit","e","preventDefault","register","pointerEvents","children","I","placeholder","onChange","type"],"sourceRoot":""}