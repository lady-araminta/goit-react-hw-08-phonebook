{"version":3,"file":"static/js/792.9360b968.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/EditContact/Editcontact.js","components/Modal/modal.js","components/ContactElem/ContactElem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/Contacts/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (users, filter) => {\n    return users.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n    );\n  }\n);\n","import {\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  Stack,\n  Button,\n  Card,\n  CardBody,\n  Flex,\n  useToast,\n  CardHeader,\n  Heading,\n} from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { nanoid } from 'nanoid';\nimport { addContact } from 'redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const toast = useToast();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const existingName = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    const existingNumber = contacts.some(contact => contact.number === number);\n\n    if (existingName) {\n      toast({\n        description: 'This contact is alredy in contacts',\n        position: 'top',\n        duration: 3000,\n      });\n      reset();\n      return;\n    } else if (existingNumber) {\n      toast({\n        description: 'This contact is alredy in contacts',\n        position: 'top',\n        duration: 3000,\n      });\n      reset();\n      return;\n    } else {\n      const newContact = { id: nanoid(), name, number };\n      dispatch(addContact(newContact));\n      toast({\n        title: 'Contact created',\n        description: \"We've added this contact to the phonebook\",\n        status: 'success',\n        position: 'top',\n        duration: 3000,\n      });\n      reset();\n    }\n  };\n  return (\n    <Card maxW=\"sm\" ml=\"auto\" mr=\"auto\" mt=\"48px\" mb=\"48px\">\n      <CardBody>\n        <CardHeader>\n          <Heading size=\"md\" textAlign=\"center\">\n            Add contact\n          </Heading>\n        </CardHeader>\n        <Stack>\n          <InputGroup as=\"form\" onSubmit={handleSubmit} flexDirection=\"column\">\n            <Flex mb=\"8px\">\n              <InputLeftAddon children=\"Name\" />\n              <Input\n                size=\"md\"\n                onChange={handleChange}\n                value={name}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n              />\n            </Flex>\n            <Flex mb=\"16px\">\n              <InputLeftAddon children=\"Tel\" />\n              <Input\n                size=\"md\"\n                onChange={handleChange}\n                value={number}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n              />\n            </Flex>\n            <Button\n              ml=\"auto\"\n              mr=\"auto\"\n              type=\"submit\"\n              children=\"Save to phonebook\"\n            />\n          </InputGroup>\n        </Stack>\n      </CardBody>\n    </Card>\n  );\n};\n","import {\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  Stack,\n  Button,\n  Card,\n  CardBody,\n  Flex,\n  CardHeader,\n  Heading,\n} from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { editContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const EditContactForm = ({ id }) => {\n  const contacts = useSelector(selectContacts);\n  const currentContact = contacts.find(contact => contact.id === id);\n  const dispatch = useDispatch();\n  const [name, setName] = useState(`${currentContact.name}`);\n  const [number, setNumber] = useState(`${currentContact.number}`);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(editContact({ id, name, number }));\n  };\n\n  return (\n    <Card maxW=\"sm\" ml=\"auto\" mr=\"auto\" mt=\"48px\" mb=\"48px\">\n      <CardBody>\n        <CardHeader>\n          <Heading size=\"md\" textAlign=\"center\">\n            Edit contact\n          </Heading>\n        </CardHeader>\n        <Stack>\n          <InputGroup as=\"form\" onSubmit={handleSubmit} flexDirection=\"column\">\n            <Flex mb=\"8px\">\n              <InputLeftAddon children=\"Name\" />\n              <Input\n                size=\"md\"\n                onChange={handleChange}\n                value={name}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n              />\n            </Flex>\n            <Flex mb=\"16px\">\n              <InputLeftAddon children=\"Tel\" />\n              <Input\n                size=\"md\"\n                onChange={handleChange}\n                value={number}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n              />\n            </Flex>\n            <Button\n              ml=\"auto\"\n              mr=\"auto\"\n              type=\"submit\"\n              children=\"Save to phonebook\"\n            />\n          </InputGroup>\n        </Stack>\n      </CardBody>\n    </Card>\n  );\n};\n","import {\n  Button,\n  Modal,\n  ModalContent,\n  ModalOverlay,\n  Stack,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { BsPlusLg } from 'react-icons/bs';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { AiOutlineEdit } from 'react-icons/ai';\nimport { EditContactForm } from 'components/EditContact/Editcontact';\n\nexport const ModalAddContact = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Stack mt=\"24px\" justifyContent=\"center\" alignItems=\"center\">\n        <Button onClick={onOpen} rightIcon={<BsPlusLg />}>\n          Add contact\n        </Button>\n      </Stack>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ContactForm />\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport const ModalEditContact = ({ id, name, number }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <>\n      <Button onClick={onOpen} children={<AiOutlineEdit />} />\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <EditContactForm id={id} name={name} number={number} />\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { Button, Td, Tr } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { AiOutlineUserDelete } from 'react-icons/ai';\nimport { ModalEditContact } from 'components/Modal/modal';\n\nexport const ContactElem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n  return (\n    <Tr key={id}>\n      <Td>{name}</Td>\n      <Td>{number}</Td>\n      <Td>\n        <ModalEditContact id={id} name={name} number={number} />\n      </Td>\n      <Td>\n        <Button\n          type=\"button\"\n          children={<AiOutlineUserDelete />}\n          onClick={handleDelete}\n        />\n      </Td>\n    </Tr>\n  );\n};\n\nContactElem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { Table, TableContainer, Tbody } from '@chakra-ui/react';\nimport { ContactElem } from 'components/ContactElem/ContactElem';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <TableContainer maxW=\"lg\" ml=\"auto\" mr=\"auto\">\n      <Table variant=\"simple\" size=\"sm\">\n        <Tbody>\n          {visibleContacts.map(({ id, name, number }) => (\n            <ContactElem key={id} id={id} name={name} number={number} />\n          ))}\n        </Tbody>\n      </Table>\n    </TableContainer>\n  );\n};\n","import { Input, InputGroup, InputLeftElement, Stack } from '@chakra-ui/react';\nimport { nanoid } from 'nanoid';\nimport { AiOutlineFilter } from 'react-icons/ai';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const filterId = nanoid();\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  return (\n    <Stack maxW=\"sm\" ml=\"auto\" mr=\"auto\" mt=\"32px\" mb=\"16px\">\n      <InputGroup>\n        <InputLeftElement pointerEvents=\"none\" children={<AiOutlineFilter />} />\n        <Input\n          value={filter}\n          onChange={e => dispatch(setFilter(e.target.value))}\n          id={filterId}\n          type=\"text\"\n          name=\"filter\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          placeholder=\"Fined contacts by name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </InputGroup>\n    </Stack>\n  );\n};\n","import { Box, Heading } from '@chakra-ui/react';\n\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\nimport { ModalAddContact } from 'components/Modal/modal';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box>\n      <ModalAddContact />\n      <Filter />\n      {isLoading && !error && <Loader />}\n      {error && (\n        <Heading size=\"md\" textAlign=\"center\">\n          {error}\n        </Heading>\n      )}\n      {contacts.length === 0 && !isLoading && !error && (\n        <Heading size=\"md\" textAlign=\"center\">\n          There are no saved contacts in your phonebook\n        </Heading>\n      )}\n      {contacts.length > 0 && <ContactList />}\n    </Box>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","users","contact","name","toLowerCase","includes","trim","ContactForm","dispatch","useDispatch","useSelector","useState","setName","number","setNumber","toast","useToast","handleChange","e","target","value","reset","maxW","ml","mr","mt","mb","size","textAlign","as","onSubmit","preventDefault","existingName","some","existingNumber","description","position","duration","newContact","id","nanoid","addContact","title","status","flexDirection","children","I","onChange","type","pattern","required","EditContactForm","currentContact","find","editContact","ModalAddContact","useDisclosure","isOpen","onOpen","onClose","justifyContent","alignItems","onClick","rightIcon","ModalEditContact","ContactElem","Tr","Td","deleteContact","ContactList","visibleContacts","variant","map","Filter","filterId","pointerEvents","setFilter","placeholder","Contacts","useEffect","fetchContacts","Loader","length"],"sourceRoot":""}